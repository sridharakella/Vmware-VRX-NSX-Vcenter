************* Install Kubernertes on Master Node *************

1. Upgrade apt packages
sudo apt-get update

2. Install Docker Engine
sudo apt-get install -y docker.io

3. Install Support packages
sudo apt-get install -y apt-transport-https curl

4. Retrieve the key for the Kubernetes repo and add it to your key manager
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

5. Add the kubernetes repo to your system
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

6. Install the three pieces you’ll need, kubeadm, kubelet, and kubectl
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

7. Create the actual cluster
kubeadm init --pod-network-cidr=192.168.0.0/16

Note - Notedown the Command to join cluster

8. Install the Calico network plugin
kubectl apply -f https://docs.projectcalico.org/manifests/calico.yaml

9. Untaint the master so that it will be available for scheduling workloads
kubectl taint nodes --all node-role.kubernetes.io/master-

10. Get Cluster Nodes
kubectl get nodes



************* Install & Configure Kubernertes Worker Node *************

1. Upgrade apt packages
sudo apt-get update

2. Install Docker Engine
sudo apt-get install -y docker.io

3. Install Support packages
sudo apt-get install -y apt-transport-https curl

4. Retrieve the key for the Kubernetes repo and add it to your key manager
curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | apt-key add -

5. Add the kubernetes repo to your system
cat <<EOF >/etc/apt/sources.list.d/kubernetes.list
deb http://apt.kubernetes.io/ kubernetes-xenial main
EOF

6. Install the three pieces you’ll need, kubeadm, kubelet, and kubectl
sudo apt-get update
sudo apt-get install -y kubelet kubeadm kubectl
sudo apt-mark hold kubelet kubeadm kubectl

7. Join the Worker Nodes to the Cluster
In the Control Plane Node, create the token and copy the kubeadm join command (NOTE:The join command can also be found in the output from kubeadm init command):
kubeadm token create --print-join-command

8. In both Worker Nodes, paste the kubeadm join command to join the cluster:
sudo kubeadm join <join command from previous command>

9. In the Control Plane Node, view cluster status (Note: You may have to wait a few moments to allow the cluster to become ready):
kubectl get nodes


---------------------------------

Note - Latest Ubuntu 22.04 and above is not compatible with Kubeadm, installation will end up with error. . Please use Ubuntu OS 20.04

************* Install Kubernetes on Master Node *************

    Upgrade apt packages
    sudo apt-get update

    Create a configuration file for containerd:

        cat <<EOF | sudo tee /etc/modules-load.d/containerd.conf
        overlay
        br_netfilter
        EOF

    Load modules:

        sudo modprobe overlay
        sudo modprobe br_netfilter


    Set system configurations for Kubernetes networking:

        cat <<EOF | sudo tee /etc/sysctl.d/99-kubernetes-cri.conf
        net.bridge.bridge-nf-call-iptables = 1
        net.ipv4.ip_forward = 1
        net.bridge.bridge-nf-call-ip6tables = 1
        EOF


    Apply new settings:
    sudo sysctl --system

    Install containerd:

        sudo apt-get update && sudo apt-get install -y containerd


    Create a default configuration file for containerd:

        sudo mkdir -p /etc/containerd


    Generate default containerd configuration and save to the newly created default file:

        sudo mkdir -p /etc/containerd
        containerd config default | sudo tee /etc/containerd/config.toml


    Restart containerd to ensure new configuration file usage:

        sudo systemctl restart containerd


    Verify that containerd is running.

        sudo systemctl status containerd


    Disable swap:

        sudo swapoff -a


    Disable swap on startup in /etc/fstab:

        sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab


    Install dependency packages:

        sudo apt-get update && sudo apt-get install -y apt-transport-https ca-certificates curl


    Download and add the GPG key:

        sudo curl -fsSLo /usr/share/keyrings/kubernetes-archive-keyring.gpg https://packages.cloud.google.com/apt/doc/apt-key.gpg


    Add Kubernetes to the repository list:

        echo "deb [signed-by=/usr/share/keyrings/kubernetes-archive-keyring.gpg] https://apt.kubernetes.io/ kubernetes-xenial main" | sudo tee /etc/apt/sources.list.d/kubernetes.list


    Update package listings:

        sudo apt-get update


    Install Kubernetes packages (Note: If you get a dpkg lock message, just wait a minute or two before trying the command again):

        sudo apt-get install -y kubelet=1.24.0-00 kubeadm=1.24.0-00 kubectl=1.24.0-00


    Turn off automatic updates:

        sudo apt-mark hold kubelet kubeadm kubectl


    Log into both Worker Nodes to perform previous steps 1 to 18.

    Initialize the Cluster-

    Initialize the Kubernetes cluster on the control plane node using kubeadm (Note: This is only performed on the Control Plane Node):

        sudo kubeadm init --pod-network-cidr 192.168.0.0/16


    Set kubectl access:

        mkdir -p $HOME/.kube
        sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
        sudo chown $(id -u):$(id -g) $HOME/.kube/config


    Test access to cluster:

        kubectl get nodes


    Install the Calico Network Add-On -

    On the Control Plane Node, install Calico Networking:

        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/tigera-operator.yaml

        kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.24.5/manifests/custom-resources.yaml


    Confirm that all of the pods are running with the following command.

        watch kubectl get pods -n calico-system


    Wait for 2-4 Min and Check the status of the control plane node:

        kubectl get nodes


    Join the Worker Nodes to the Cluster

        In the Control Plane Node, create the token and copy the kubeadm join command (NOTE: The join command can also be found in the output from kubeadm init command):

            kubeadm token create --print-join-command

        In both Worker Nodes, paste the kubeadm join command to join the cluster. Use sudo to run it as root:

            sudo kubeadm join ...

        In the Control Plane Node, view cluster status (Note: You may have to wait a few moments to allow all nodes to become ready):

            kubectl get nodes